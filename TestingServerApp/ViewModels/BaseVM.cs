using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace TestingServerApp
{
    public class BaseVM
    {
        public BaseVM()
        {
            string salt = GenerateSalt();
            byte[] saltAsBytes = GenerateSaltAsBytes();
            string passwordHash = HashPassword("admin", salt);
            string passwordHash2 = HashPassword2("admin", saltAsBytes);
        }

        public string HashPassword(string password, string salt)
        {
            using (var sha256 = SHA256.Create())
            {
                byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password + salt));
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
                /* The purpose of this operation is to transform the hexadecimal string generated by BitConverter.ToString(hashBytes) into a clean, hyphen-free, and lowercase representation of the hash, which is commonly used for storing and comparing password hashes.*/
            }
        }
        public string GenerateSalt()
        {
            byte[] salt = new byte[16]; // 16 bytes is a common salt length/ 32
            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(salt);
            }
            return Convert.ToBase64String(salt);
        }
        public byte[] GenerateSaltAsBytes()
        {
            byte[] salt = new byte[16]; // 16 bytes is a common salt length/ 32
            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(salt);
            }
            return salt;
        }

        public string HashPassword2(string password, byte[] saltAsBytes)
        {
            using (var sha256 = SHA256.Create())
            {
                byte[] saltedPassword = new byte[saltAsBytes.Length + Encoding.UTF8.GetByteCount(password)];
                Array.Copy(saltAsBytes, saltedPassword, saltAsBytes.Length);
                Encoding.UTF8.GetBytes(password, 0, password.Length, saltedPassword, saltAsBytes.Length);

                byte[] hashBytes = sha256.ComputeHash(saltedPassword);
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
            }
        }
    }
}
