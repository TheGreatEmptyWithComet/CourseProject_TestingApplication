using CommunityToolkit.Mvvm.Input;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace TestingServerApp
{
    public class BaseVM: NotifyPropertyChangeHandler
    {
        #region Properties
        /****************************************************************************************/
        private readonly Context context;

        private string currentPage;
        public string CurrentPage
        {
            get { return currentPage; }
            set
            {
                currentPage = value;
                NotifyPropertyChanged(nameof(CurrentPage));
            }
        }
        #endregion


        #region Inner view models
        /****************************************************************************************/
        public TestCategoryPageVM TestCategoryPageVM { get; private set; }
        public TestsListPageVM TestsListPageVM { get; private set; }
        #endregion



        #region Commands
        /****************************************************************************************/
        public ICommand PageNavigationCommand { get; private set; }

        #endregion


        #region Constructor
        /****************************************************************************************/
        public BaseVM()
        {
            context = new Context();
            
            // Set the start page
            CurrentPage = "UsersPage.xaml";

            // Init inner view models
            TestCategoryPageVM = new TestCategoryPageVM(context);
            TestsListPageVM = new TestsListPageVM(context);
            TestsListPageVM.OnCurrentPageChanged += (page) => CurrentPage = page;

            InitCommands();

        }
        #endregion


        #region Methods
        /****************************************************************************************/
        private void InitCommands()
        {
            PageNavigationCommand = new RelayCommand<string>(p => CurrentPage = p);
        }



        #endregion

        //var users = context.Users.ToList();
        //byte[] adminSalt = context.Users.Where(u => u.Login == "admin").Select(u => u.PasswordSalt).FirstOrDefault()!;
        //string adminHash = context.Users.Where(u => u.Login == "admin").Select(u => u.PasswordHash).FirstOrDefault()!;

        //var result = adminHash == PasswordEncryption.GetPasswordHash("admin2", adminSalt);



        //public string HashPassword(string password, string salt)
        //{
        //    using (var sha256 = SHA256.Create())
        //    {
        //        byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password + salt));
        //        return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        //        /* The purpose of this operation is to transform the hexadecimal string generated by BitConverter.ToString(hashBytes) into a clean, hyphen-free, and lowercase representation of the hash, which is commonly used for storing and comparing password hashes.*/
        //    }
        //}
        //public string GenerateSalt()
        //{
        //    byte[] salt = new byte[16]; // 16 bytes is a common salt length/ 32
        //    using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
        //    {
        //        rng.GetBytes(salt);
        //    }
        //    return Convert.ToBase64String(salt);
        //}
        //public byte[] GenerateSaltAsBytes()
        //{
        //    byte[] salt = new byte[16]; // 16 bytes is a common salt length/ 32
        //    using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
        //    {
        //        rng.GetBytes(salt);
        //    }
        //    return salt;
        //}

        //public string HashPassword2(string password, byte[] saltAsBytes)
        //{
        //    using (var sha256 = SHA256.Create())
        //    {
        //        byte[] saltedPassword = new byte[saltAsBytes.Length + Encoding.UTF8.GetByteCount(password)];
        //        Array.Copy(saltAsBytes, saltedPassword, saltAsBytes.Length);
        //        Encoding.UTF8.GetBytes(password, 0, password.Length, saltedPassword, saltAsBytes.Length);

        //        byte[] hashBytes = sha256.ComputeHash(saltedPassword);
        //        return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        //    }
        //}
    }
}
